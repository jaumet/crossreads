[
	{
		"pid" : 0,
		"p" : ""
	},
	{
		"pid" : 1,
		"p" : "<br />This article was written for an Italian contemporary art magazine in 2005, in an attempt to introduce a topic prevalent in the international debate to the local audience: Software Art and its connections with early conceptual art. Despite its popular approach and some juvenile naivety, the article is original in its attempt to collate various scattered notes into a \"theory\". Today, \"Software Art\" as a category is no longer fashionable, but much computer-based art can still benefit from this approach.<br />"
	},
	{
		"pid" : 2,
		"p" : "<br />I<br />«... in a way we are Duchamp's ideal children», the Slovenian artist Vuk Cosic declared [1] in an interview back in 1997. It would be hard to find a better summary of one of Net Art criticism's core concepts: namely the belief that Net Art has its roots in Dadaism, passing through Fluxus, Situationism, the Neo Avant-garde movements of the 60s and Conceptual Art. No doubt strategy played an important role in this genealogical statement. Yet this alone does not account for a phenomenon that was entirely unforeseeable in the mid-nineties. <br />"
	},
	{
		"pid" : 3,
		"p" : "<br />A phenomenon – Net Art – that didn't have anything to do with the post-modern refinement of the digital media of the time, or with what was happening in the art world. The internet seemed to convey expectations that had long been considered dead: a general rejection of the art system and of those persistent dogmas such as the uniqueness and non-reproducibility of the work of art; the deconstruction of the medium; the dematerialization of art; a new political inspiration. I<br />"
	},
	{
		"pid" : 4,
		"p" : "<br />n short, only the profound nature of the medium can help explain this \"Modernism revisited in color\", to quote Mario Schifano's famous tribute to Futurism. Like it or not, if we can still talk about political art, appropriation, process, open work and new moderns, it is largely thanks to the advent of the World Wide Web.<br />"
	},
	{
		"pid" : 5,
		"p" : "<br />Software Art grew out of this situation, and unsurprisingly inherited its genealogy, or rather, the tendency to reconstruct its own family tree. It is interesting to note how, in Software Art theory, the formulation of a definition continually interweaves with this retrospective investigation. Of course this is only natural: the hypothesis to be proven is that software – namely an encoded sequence of formal instructions – can be art; and what better than a precedent could save us from a lot of useless complications? Hence, Florian Cramer's famous statement that Composition 1961 Nr 1, January 1, a piece of paper bearing the phrase \"Draw a straight line and follow it\" by the Fluxus artist La Monte Young, can be viewed as a perfect example of Software Art. <br />"
	},
	{
		"pid" : 6,
		"p" : "<br />Clearly, through La Monte Young, this recognition extends to all art based on the execution of a formally encoded process. And it was again Cramer who, in his seminal essay \"Concepts, Notations, Software, Art\" [2], quotes Tristan Tzara's instructions for writing a Dada poem and mentions John Cage and Sol LeWitt, artists we will return to shortly.<br />"
	},
	{
		"pid" : 7,
		"p" : "<br />The most interesting thing in this framework is that it is not at all a matter of misappropriation. In other words, we are not confronted with a son who recognizes a father who, in turn, if he were to find out, would immediately disown him; on the contrary, it is a question of a completely verifiable pedigree that is attested by some important events. Let's give it a go: Software Art is conceptual art's acknowledged son, its sole heir, able not only to fully take on its heritage but also to solve some of its perplexing difficulties.<br />"
	},
	{
		"pid" : 8,
		"p" : "<br />Jewish Museum, New York 1970. Jack Burnham, an American theoretician and curator, organizes an exhibition featuring some conceptual artists alongside representatives of the creative research on computer technology. Joseph Kosuth, Vito Acconci, John Baldessari, Les Levine and Hans Haacke share the playground with Theodor H. Nelson (the inventor of hypertext) and the Architecture Machine Group, directed by Nicholas Negroponte. <br />"
	},
	{
		"pid" : 9,
		"p" : "<br />The exhibition, called Software: Information Technology: Its New Meaning for Art, aims to highlight the effects of the newborn information age on artistic production. In the catalogue Burnham stresses the fact that «the public can personally respond to programmatic situations structured by artists» [3], with or without using computers. As Edward A. Shanken wrote about him: <br />"
	},
	{
		"pid" : 10,
		"p" : "<br />«Software was predicated on the ideas of \"software\" and \"information technology\" as metaphors for art. He conceived of \"software\" as parallel to the aesthetic principles, concepts, or programs that underlie the formal embodiment of the actual art objects, which in turn parallel \"hardware\".» [4]<br />"
	},
	{
		"pid" : 11,
		"p" : "<br />Software was neither the first nor the only declaration of a relationship between the advent of conceptual art and the rising information age: that very same year, the Museum of Modern Art in New York proposed a show on conceptual art curated by Kynaston McShine, and significantly entitled Information. Yet, today Burnham's idea of software as \"metaphor for art\", and his emphasis on process, sound like a prophecy about the future rise of Software Art.<br />A year before Software, in January 1969, Sol LeWitt published his \"Sentences on Conceptual Art\". This seminal text included statements such as: <br />"
	},
	{
		"pid" : 12,
		"p" : "<br />«10. Ideas can be works of art; they are in a chain of development that may eventually find some form. All ideas need not be made physical. [...] 27. The concept of a work of art may involve the matter of the piece or the process in which it is made. [...] 29. The process is mechanical and should not be tampered with. It should run its course.» [5] <br />"
	},
	{
		"pid" : 13,
		"p" : "<br />LeWitt's Wall Drawings are the perfect application of these theories: art exists as instruction, idea put on paper; its execution is a purely mechanical process that does not depend on the artist, but can be entrusted to an executor.<br />Thirty five years later, in June 2004, the American artist and programmer Casey Reas wondered: why not entrust art to a machine, then? His reasoning was simple: <br />"
	},
	{
		"pid" : 14,
		"p" : "<br />«The relation between LeWitt and his draftsperson is often compared to the relation between a composer and performer, but I think it's also valid to look at the comparison between a programmer and the entity of execution. LeWitt writes programs for people to execute and interpret rather than for machines.» [6]<br />"
	},
	{
		"pid" : 15,
		"p" : "<br />Taking these ideas to an extreme, Reas created [software] structures (2004), a project exhibited on Artport, the online gallery of the Whitney Museum. With LeWitt's consent, Reas converted three of his Wall Drawings into a form that could be interpreted by a program, but sought to keep the inevitable ambiguity of natural language; he then introduced a human variable, asking three artist friends to interpret the same \"structure\", and a formal one, using two different languages to display the code. The passage from human language to machine language involved some corrections. But, as Reas stated, «If this is a work of conceptual art, the concept should remain regardless of the medium.» [7]<br />"
	},
	{
		"pid" : 16,
		"p" : "<br />As everybody knows, the greatest revolution of conceptual art was the rejection of the art object and the introduction of a totally dematerialized art (Lucy Lippard), made up of ideas and processes. At that time, a statement like that could not last for long. Collectors and museums soon began to confuse the work with its very execution: LeWitt's wall paintings made us forget the concept they represent, Art & Language archives became, as \"installations\", more important than the documents they hosted, and Lawrence Wiener's statements gained such visual majesty that the fact that they were originally purely spoken phrases became of secondary importance. Conceptual art had lost its radicalism, and the reaction was not long in coming.<br />"
	},
	{
		"pid" : 17,
		"p" : "<br />[software] structures came about with the aim of answering a simple question: «Is the history of conceptual art relevant to the idea of software as art?» [8] At this point, it could make sense to reverse this question, and ask: «Is the idea of software as art relevant to the history of conceptual art?» The answer is yes. Software art brings immateriality back to conceptual art; the prevalence of the idea over the product, of the process over the result, of the code over the output. By turning the executor into a machine, any doubt about the artistic nature of the finished product is removed. Art must be sought elsewhere: in the \"code\", the modern reincarnation of the \"concept\" in the digital age. <br />"
	},
	{
		"pid" : 18,
		"p" : "<br />Software Art picks up the conceptual path at the point where it entered a dead end; and the medium it uses ensures that the crisis won't be repeated. <br />I have called Software Art conceptual art’s \"acknowledged son\". Sol LeWitt's recent career itself seems to lend credit to this thesis. In 1998 the Sandra Gering Art Gallery of New York organized a group show entitled Formulations, setting the work of LeWitt alongside that of Hanne Darboven and the software artist John F. Simon, Jr. Furthermore, his latest sculptures, called Splotches (2005), are molded out of fiberglass and painted by a machine that follows a set of instructions able to regulate both the shape and distribution of color over their surface. <br />"
	},
	{
		"pid" : 19,
		"p" : "<br />It's a pity that the instructions are not publicly available anymore: in that case, another executor might be able to re-enact the process that created these fascinating colored blobs. All we can do is hope that the next Splotches will be open source.<br />"
	},
	{
		"pid" : 20,
		"p" : "<br />II<br />In May 2002 the first edition of the Read_me Festival – the first festival entirely dedicated to Software Art – took place in Moscow. A year later, in January 2003, the platform Runme.org, the largest available online artistic software \"storehouse\", was launched. On awarding the prizes, the Festival jury formulated a definition which was to become a classic: «We consider Software Art to be art whose material is algorithmic instruction code and / or which addresses cultural concepts of software.» [9] <br />"
	},
	{
		"pid" : 21,
		"p" : "<br />Two years later, in a seminal paper again debated at Read_me, the Danish art critic Jacob Lillemose [10] stated that the slash dividing the two sentences, instead of acting as a link between the two definitions, seemed to open a break: on the one hand formalistic research focused on the algorithm and its dynamics, while on the other what he termed a \"cultural vision\" which roots software in the socio-political context it emerges from. In 2003, Florian Cramer [11] also noticed the existence of two distinct trends in Software Art, that he called \"Software Formalism\" and \"Software Culturalism\"; yet Lillemose went a little further, going back to two different historical roots that he singled out in two ramifications of Conceptual Art.<br />"
	},
	{
		"pid" : 22,
		"p" : "<br />The first trend, focusing on the aesthetics of code and programming languages, describes code as a process to analyze, a series of instructions to apply or the starting point for a visual work taking place on the interface. This trend has affinities with two very different ramifications of Conceptual Art, namely the linguistic trend of Joseph Kosuth and Sol LeWitt and the process-oriented work by John Cage and La Monte Young. And as we noted in the first chapter of this text, it is above all LeWitt who seems to represent the missing link in the chain.<br />"
	},
	{
		"pid" : 23,
		"p" : "<br />In 1997 the American artist John F. Simon Jr. made Every Icon, a simple Java Applet whose function was to show every icon displayable within a 32 x 32 square grid (the standard size of a desktop icon). Rather than being a conceptual-inspired work of Software Art, Every Icon could be described as the last conceptual masterpiece, a proper sublimation of the process: its mission is easy, but the rigor with which it is observed opens a never-ending process, that turns into a reflection on time and eternity, comparable to Roman Opalka’s work. Besides, the work’s interface is so simple that Every Icon – formalized by Simon either as an on-line work or as a single object inclusive of hardware (an LCD display) and software – functions entirely as a describable and recordable concept: «Given: A 32x32 Grid; Allowed: Any element of the grid to be black or white; Shown: Every Icon.» As the artist states, <br />«While Every Icon is resolved conceptually, it is irresolvable in practice. In some ways the theoretical possibilities outdistance the time scales of both evolution and imagination.» [12]<br />"
	},
	{
		"pid" : 24,
		"p" : "<br />Simon’s engagement with the formalistic trend of Software Art becomes evident in the minimal aesthetics of his following work, again aimed at creating abstract interfaces – prints, drawings or hardware panels assembled by the artist himself – which display an algorithmic operation, and going back from Minimalism to older models, but not for that any less attractive, such as Piet Mondrian and Paul Klee. Simon pays homage above all to the latter in his latest work, which is both the summing up of twenty years of work, a drawing tool everyone can use, and a reflection on the way a fluid medium like software enables various avant-garde intuitions to be brought up to date. Published by Printed Matter, Inc. in collaboration with the Whitney Museum of New York – which offers some of the tools on its site – Mobility Agents. <br />"
	},
	{
		"pid" : 25,
		"p" : "<br />A Computational Sketchbook v1.0 (2005) [13] is a CD-rom accompanied by a booklet. There, Simon describes the birth of the three tools that make up the software, capable of creating complex shapes starting from very simple input: a point, a curved or straight line drawn at different speeds. The anomaly lies in the fact that these instruments are subordinated to the gesture, to the impulsive nature of the improvised sketch, and that instead of imitating traditional painting tools (brush, spray can) they are oriented toward representative drawing or photo-realistic graphics, encouraging abstract research.<br />"
	},
	{
		"pid" : 26,
		"p" : "<br />Simon has not written software which draws, but software to draw, making it possible to work on both levels: programming (which here should be read as \"creative writing\", since it actually creates) and abstract drawing. Code – the same tool which initiated Every Icon’s radical Conceptualism – now allows him to be a \"painter\" again without denying any of those premises: after having delved into the catalogue of possibilities, he has simply made his choice.<br />"
	},
	{
		"pid" : 27,
		"p" : "<br />The other Software Art trend is in a diametrically opposite direction, that of Cramer’s \"Software Culturalism\". On one hand, it has its origins in the world of alternative software and \"software as culture\" (Matthew Fuller), namely the belief that software is not a neutral tool, but the fruit of a specific culture and ideology; while on the other hand, as Lillemose points out, it refers to two other inflexions of Conceptual Art: the political stance of Hans Haacke, Dan Graham, Victor Burgin, Gordon Matta-Clark, and the performance-based work of Vito Acconci, Bruce Nauman and Chris Burden. Making use of the term \"contextual art\", theorized by Peter Weibel in the 70s and taken up again in 1993 for the exhibition Contextual Art. Art of the 90s, Lillemose states that \"Software Culturalism\" belongs to the \"contextual family\", inaugurated by Conceptual Art, which «criticized the art institution, a.k.a. the white cube, as an oppressive and restrictive space that only accepted a certain type of art and a certain type of aesthetics.» [14]<br />"
	},
	{
		"pid" : 28,
		"p" : "<br />Of course, Software Art is not specifically criticizing the art world, as the institutional critique did; its target is, more broadly, the current social and political situation, against which it sets radical, alternative, or subversive instruments, capable of subverting social practices and cultural forms. In this sense the software projects by the Austrian duo UBERMORGEN.COM can be considered particularly emblematic. <br />"
	},
	{
		"pid" : 29,
		"p" : "<br />Based in Vienna, UBERMORGEN.COM was born as a dotcom devoted to a particularly virulent form of media activism, renamed \"Media Aktionism\" in homage to the Viennese Actionism of the 70s. In 2000, UBERMORGEN.COM achieved international visibility with Vote-Auction, a website that, during the American elections, offered citizens the chance to put their vote up for auction to the highest bidder, turning the undoubted economic value of a vote into real money. The project, unfortunately, garnered not only an entire episode of Burden of Proof, the CNN legal program, but also a slew of charges, and a series of injunctions sent by an (American) court to the group’s (Swiss) server to close the site down (as promptly happened). <br />"
	},
	{
		"pid" : 30,
		"p" : "<br />The Injunction Generator (2003) is a sarcastic denunciation of this paradoxical situation (American jurisdiction does not cover Switzerland, and neither can an injunction be sent by e-mail) transforming the injustice which UBERMORGEN.COM suffered into a public service: everyone can go on the project’s site and fill in an online form, addressing it to the server of a site that one wants to delete from the Web. The software sends out an official injunction, and informs us whether our attack was successful or not. <br />"
	},
	{
		"pid" : 31,
		"p" : "<br />The work is a masterpiece of dark humor, formally moderate but conceptually explosive in its depiction of the internet as a no-man’s land where the law of the jungle is in force, and turning the illegality it uses against the law itself. Highly skilled at creating false business identities, UBERMORGEN.COM declared that the work was a project by IP-NIC (Internet Partnership for No Internet Content); in turn, the generated documents were \"[F]originals\", forged original documents (at this point, it is almost superfluous to mention the authenticity certificates by the pre-conceptual artist Piero Manzoni): exactly like the bank statements generated by the Bank Statement Generator (2005), a software which keeps us up to date, in a rather unorthodox way, with our account. In the belief that authenticity is a collective hallucination, UBERMORGEN.COM sows the seeds of doubt in the faith we place in a highly unreliable banking system.<br />"
	},
	{
		"pid" : 32,
		"p" : "<br />Lastly, the very recent GWEI (Google Will Eat Itself, 2005), made in collaboration with Alessandro Ludovico and Paolo Cirio, shows how it is possible to turn business into an instrument of struggle against the establishment. The project uses the Google Adsense advertisement tool: a system that, when requested by the user, inserts various links to potentially interesting businesses in the user’s site. When a visitor clicks on one of these links, the site owner earns a small sum which can become considerable if the site is a popular one. In the case of GWEI, real users and artificially simulated users raise the site’s earnings, and when Google's checks arrive they are immediately reinvested in Google shares. <br />"
	},
	{
		"pid" : 33,
		"p" : "<br />In other words, GWEI is a slow but infallible system to devour Google using of its own money, and eat away at one of the strongest businesses in the world through advertising. It may or may not function: what matters is its critical and imaginative power, the celibate machine that, in a surprising way, turns capitalism and advertising into absurd instruments of struggle. In other words, the concept. Also known as software.<br />"
	},
	{
		"pid" : 34,
		"p" : "<br />At this point, we are far removed from LeWitt. But Software Art is as varied as Conceptual Art, whose complex family tree Software Art references through the voices of artists and critics. We may or may not believe in this rhizomatic pedigree that is also, as we have said, a precise cultural strategy aimed at enabling Software Art to come out from the isolation that the art world persists in relegating it to. Of course, the artists already have some documents ready to prove it: forged original documents.<br />"
	},
	{
		"pid" : 35,
		"p" : "<br /><<<<<br />First published in two parts in the Italian magazine Arte e Critica (Issue 44, December 2005 and Issue 45, March 2006); an English version was published in the online review Hz Journal, (January 9, 2007).<br />[1] In Tilman Baumgaertel, \"Interview with Vuk Cosic\", in Nettime, June 30, 1997.<br />[2] Florian Cramer, \"Concepts, Notations, Software, Art\", March 23, 2003, online at http://userpage.fu-berlin.de/~cantsin. <br />[3] Jack Burnham, \"Notes on Art and Information Processing\", in Jack Burnham (ed.), Software: Information Technology: Its New Meaning for Art, exhibition catalogue, New York, Jewish Museum 1970.<br />[4] Edward A. Shanken, \"The House That Jack Built: Jack Burnham's Concept of 'Software' as a Metaphor for Art\", in Leonardo, Volume 6, Number 10, November 1998. <br />[5] Sol LeWitt, \"Sentences on Conceptual Art\", in 0-9, New York, no. 5, January 1969.<br />[6] Casey Reas, \"[software] structures\", June 2004, online at <br />http://artport.whitney.org/commissions/softwarestructures/. <br />[7] Ivi.<br />[8] Ivi.<br />[9] AAVV, \"Read_Me 1.2 Jury Statement\", May 2002, online at www.runme.org/project/+statement/. <br />[10] Jacob Lillemose, \"A Re-declaration of Dependence. Software art in a cultural context it can’t get out of\", in Read_me 2004, online at www.artnode.org/art/lillemose/readme2004.html. <br />[11] Florian Cramer, Op. cit.<br />[12] John F. Simon Jr., \"Every Icon Statement\", in Parachute, January 1997, online at www.numeral.com/articles/paraicon/paraicon.html. <br />[13] John F. Simon Jr., Mobility Agents. A Computational Sketchbook v1.0, Whitney Museum & Printed Matter, Inc., New York, 2005.<br />[14] Jacob Lillemose, Op. cit.<br />>>>><br />"
	},
	{
		"pid" : 0,
		"p" : ""
	}
];